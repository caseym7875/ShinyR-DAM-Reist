"0","# Initialize an empty list to store dataframes by condition and gender"
"0","condition_groups <- list()"
"0",""
"0","# Iterate over all dataframes"
"0","for (df_name in names(all_conditions)) {"
"0","  # Extract components from the dataframe name"
"0","  name_parts <- strsplit(df_name, ""_"")[[1]]"
"0","  condition <- strsplit(name_parts[4], "" "")[[1]][1] # Condition number"
"0","  gender <- sub("".* "", """", df_name)  # Extract gender (after last space)"
"0","  "
"0","  # Create a unique key for grouping"
"0","  group_key <- paste(condition, gender, sep = ""_"")"
"0","  "
"0","  # Add dataframe to the appropriate group"
"0","  condition_groups[[group_key]] <- c(condition_groups[[group_key]], list(all_conditions[[df_name]]))"
"0","}"
"0",""
"0","# Initialize an empty list to store merged dataframes"
"0","merged_conditions <- list()"
"0",""
"0","# Iterate over each group and merge dataframes"
"0","for (group_key in names(condition_groups)) {"
"0","  df_list <- condition_groups[[group_key]]  # Get list of dataframes for the group"
"0","  "
"0","  # Use reduce with full_join to merge all dataframes in the group"
"0","  comb <- Reduce(function(x, y) full_join(x, y, by = c(""Dec_time"", ""Dec_ZT_time"", ""Condition"")), df_list)"
"0","  "
"0","  # Apply transformation to compute mean and SEM"
"0","  merged_df <- comb %>%"
"0","    mutate(mean = rowMeans(select(., starts_with(""mean"")), na.rm = TRUE),"
"0","           SEM = rowMeans(select(., starts_with(""SEM"")), na.rm = TRUE)) %>%"
"0","    select(Dec_time, Dec_ZT_time, Condition, mean, SEM)  # Keep only necessary columns"
"0","  "
"0","  # Store the merged dataframe with a meaningful name"
"0","  merged_conditions[[paste0(group_key, ""_merged"")]] <- merged_df"
"0","}"
"0",""
"0","# `merged_conditions` now contains merged dataframes for each condition and gender"
"0",""
"0",""
